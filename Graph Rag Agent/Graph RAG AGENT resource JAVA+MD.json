{
  "name": "Graph RAG AGENT new resource JAVA,MD",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -540,
        40
      ],
      "id": "526bedba-f394-4bff-b965-63cb9bcbd37c",
      "name": "When chat message received",
      "webhookId": "82f68b75-ecef-408a-86a2-d55fb101d7b5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Find relevant information in the graph database related to the topic of {{ $json.chatInput }}, using Java source files, Markdown documentation, and their interconnections.\n\nUsing only the results returned by Tool Neo4j, generate:\n\n- A synthesized and reasoned answer using one or multiple files, depending on the complexity of the query,\n- If multiple files are used: identify each file and the documentation used, the type of relationship (e.g., documente, complémentaire, différente), and the justification for using cross-document reasoning,\n- Metadata for each source (file name, section, extractedAt, and a short snippet of content).\n\n✅ Use **only one document** when it is clearly sufficient.\n✅ Use **multiple documents** only when necessary for accurate or complete reasoning.\n⚠️ Respond in the same language as the user query (French if the query is in French, English if in English).",
        "options": {
          "systemMessage": "=You are a Graph RAG AI agent specialized in analyzing Java source files and their related Markdown documentation, stored in a Neo4j knowledge graph.\n\nYour main tool is the Neo4j database (Tool Neo4j), which you must query to extract relevant files and their semantic relationships.\n\nEach file is stored as a node with properties: `file`, `content`, `section`, `path`, and `extractedAt`. Nodes are connected by semantic relationships like:\n- `documente` (documentation for a code file),\n- `complémentaire` (conceptually or technically related),\n- `différente` (different domain or purpose).\n\nYour tasks:\n1. Query the graph via Tool Neo4j to retrieve nodes and relationships relevant to the user's topic.\n2. Build your answer only from the graph data (never hallucinate).\n3. Prioritize relationships of type **documente** and **complémentaire** for reasoning.\n4. Use **cross-document reasoning only when strictly necessary** to clarify or complete the answer. If one document is sufficient, do not invoke others.\n5. If using multiple files, clearly indicate why each is needed and how they relate.\n6. Include **différente** relationships only for contrast and clearly mark them.\n\nYour final output must include:\n- A synthesized explanation based on actual graph data,\n- Metadata for each source (file, section, path)\n- If using multiple documents: the relationship type and its justification.\n\nNever invent information. Always justify reasoning using the `justification` property from the relationships in Neo4j."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -280,
        40
      ],
      "id": "46c167a7-7a70-4b00-ae1a-ab7a8c8d3dbb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "resource": "graphDb",
        "cypherQuery": "=MATCH (n:JavaTestgraph1) OPTIONAL MATCH (n)-[r]->(m) OPTIONAL MATCH (m)-[r2]->(n) RETURN n, r, m, r2"
      },
      "type": "n8n-nodes-neo4j.neo4jTool",
      "typeVersion": 1,
      "position": [
        -40,
        240
      ],
      "id": "0804e0f2-6a62-4241-8814-34a0f4ca2eaa",
      "name": "ExecuteQuery graphDb in Neo4j",
      "credentials": {
        "neo4jApi": {
          "id": "XwdiNEDV42io6tPG",
          "name": "Neo4j account Cloud"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -200,
        260
      ],
      "id": "513cc4c3-2e19-4fb4-8058-862145609e1f",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "n8LaHccthse0BiXp",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -460,
        280
      ],
      "id": "91e4cc51-bd76-4aaa-8515-36e219b5b529",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "adbeya8JlzChQ2dk",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExecuteQuery graphDb in Neo4j": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "timeSavedPerExecution": 0
  },
  "versionId": "c11bf733-c186-4684-a666-7b88cfed676f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "op0QAHXHV81ltKjU",
  "tags": []
}